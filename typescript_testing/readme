# 🚀 TypeScript Execution Methods

This guide shows various ways to run TypeScript files with examples and explanations.

## 📁 Files in this directory:
- `test.ts` - Sample TypeScript file
- `tsconfig.json` - TypeScript configuration
- `readme` - This documentation

---

## 🎯 **Method 1: Using ts-node (Direct execution)**

**Description:** Run TypeScript files directly without compilation step.

### Installation:
```bash
# Global installation
npm install -g ts-node typescript

# Or use npx (no global installation needed)
npx ts-node test.ts
```

### Usage:
```bash
# Run directly
ts-node test.ts

# With specific tsconfig
ts-node --project tsconfig.json test.ts

# With ES modules
ts-node --esm test.ts
```

### Pros:
- ✅ Fast development workflow
- ✅ No compilation step needed
- ✅ Immediate execution

### Cons:
- ❌ Slower than compiled JavaScript
- ❌ Requires ts-node installation

---

## 🎯 **Method 2: Compile then Run (Traditional)**

**Description:** Compile TypeScript to JavaScript first, then run with Node.js.

### Commands:
```bash
# Compile single file
tsc test.ts

# Run compiled JavaScript
node test.js

# Compile with config
tsc --project tsconfig.json

# Compile and watch for changes
tsc --watch
```

### Pros:
- ✅ Fastest execution (native JavaScript)
- ✅ Production-ready
- ✅ Type checking during compilation

### Cons:
- ❌ Two-step process
- ❌ Need to recompile after changes

---

## 🎯 **Method 3: Using NPX (No global installation)**

**Description:** Run TypeScript without installing tools globally.

### Commands:
```bash
# Using ts-node via npx
npx ts-node test.ts

# Using tsx (modern alternative)
npx tsx test.ts

# Using typescript directly
npx tsc test.ts && node test.js
```

### Pros:
- ✅ No global dependencies
- ✅ Always uses latest version
- ✅ Clean system

### Cons:
- ❌ Slower first run (downloads packages)
- ❌ Requires internet connection

---

## 🎯 **Method 4: Using tsx (Modern TypeScript executor)**

**Description:** Fast TypeScript execution with modern features.

### Installation & Usage:
```bash
# Install tsx
npm install -g tsx

# Run TypeScript file
tsx test.ts

# Watch mode
tsx watch test.ts

# With Node.js flags
tsx --inspect test.ts
```

### Pros:
- ✅ Very fast execution
- ✅ Modern ESM support
- ✅ Built-in watch mode

### Cons:
- ❌ Newer tool (less mature)
- ❌ Additional dependency

---

## 🎯 **Method 5: Using Deno**

**Description:** Run TypeScript natively with Deno runtime.

### Installation & Usage:
```bash
# Install Deno
curl -fsSL https://deno.land/x/install/install.sh | sh

# Run TypeScript file
deno run test.ts

# With permissions
deno run --allow-all test.ts
```

### Pros:
- ✅ Native TypeScript support
- ✅ Built-in security
- ✅ Modern runtime

### Cons:
- ❌ Different from Node.js ecosystem
- ❌ Different APIs

---

## 🎯 **Method 6: Using Bun**

**Description:** Ultra-fast JavaScript runtime with native TypeScript support.

### Installation & Usage:
```bash
# Install Bun
curl -fsSL https://bun.sh/install | bash

# Run TypeScript file
bun run test.ts

# Direct execution
bun test.ts
```

### Pros:
- ✅ Extremely fast
- ✅ Native TypeScript support
- ✅ Built-in bundler

### Cons:
- ❌ Newer ecosystem
- ❌ Less compatibility

---

## 🎯 **Method 7: Using nodemon for development**

**Description:** Auto-restart on file changes during development.

### Installation & Usage:
```bash
# Install nodemon
npm install -g nodemon

# Watch TypeScript files with ts-node
nodemon --exec ts-node test.ts

# Watch and compile
nodemon --exec "tsc test.ts && node test.js" test.ts

# With custom config
nodemon --exec tsx test.ts
```

### Pros:
- ✅ Auto-restart on changes
- ✅ Great for development
- ✅ Configurable

### Cons:
- ❌ Development only
- ❌ Additional dependency

---

## 🎯 **Method 8: Using VS Code Tasks**

**Description:** Run TypeScript through VS Code integrated terminal.

### Setup (tasks.json):
```json
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run TypeScript",
      "type": "shell",
      "command": "ts-node",
      "args": ["${file}"],
      "group": "build",
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "shared"
      }
    }
  ]
}
```

### Usage:
- Press `Ctrl+Shift+P`
- Type "Tasks: Run Task"
- Select "Run TypeScript"

---

## 🎯 **Method 9: Using Docker**

**Description:** Run TypeScript in isolated container environment.

### Dockerfile:
```dockerfile
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install -g ts-node typescript
COPY . .
CMD ["ts-node", "test.ts"]
```

### Commands:
```bash
# Build image
docker build -t ts-app .

# Run container
docker run ts-app
```

---

## 🎯 **Method 10: Using npm scripts**

**Description:** Define scripts in package.json for easy execution.

### package.json:
```json
{
  "scripts": {
    "start": "ts-node test.ts",
    "build": "tsc",
    "dev": "nodemon --exec ts-node test.ts",
    "prod": "tsc && node test.js"
  }
}
```

### Usage:
```bash
npm start       # Run with ts-node
npm run build   # Compile only
npm run dev     # Development with auto-restart
npm run prod    # Production build and run
```

---

## 📊 **Performance Comparison**

| Method | Speed | Setup | Best for |
|--------|-------|-------|----------|
| Compiled JS | ⭐⭐⭐⭐⭐ | Medium | Production |
| ts-node | ⭐⭐⭐ | Easy | Development |
| tsx | ⭐⭐⭐⭐ | Easy | Modern dev |
| Bun | ⭐⭐⭐⭐⭐ | Medium | Cutting edge |
| Deno | ⭐⭐⭐⭐ | Medium | Security focused |

---

## 🛠️ **Recommended Setup**

### For Development:
```bash
# Quick start
npx tsx test.ts

# With watch mode
npx tsx watch test.ts
```

### For Production:
```bash
# Compile and run
tsc && node test.js
```

### For Team Projects:
```json
// package.json
{
  "scripts": {
    "start": "tsx test.ts",
    "dev": "tsx watch test.ts",
    "build": "tsc",
    "prod": "npm run build && node dist/test.js"
  }
}
```

---

## 🔧 **Troubleshooting**

### Common Issues:

1. **Module not found:**
   ```bash
   npm install -g typescript ts-node
   ```

2. **Cannot find 'console':**
   ```json
   // tsconfig.json
   {
     "compilerOptions": {
       "lib": ["ES2020", "dom"]
     }
   }
   ```

3. **ES Module errors:**
   ```bash
   ts-node --esm test.ts
   ```

---

## 📝 **Example Usage**

```bash
# Current test.ts file content:
let input = `testing`;
let output = "Changes staged for commit";
console.log("Changes staged for commit");

# All these commands will output: "Changes staged for commit"

ts-node test.ts
npx tsx test.ts
tsc test.ts && node test.js
npx ts-node test.ts
deno run test.ts
bun test.ts
```

Choose the method that best fits your workflow and requirements!
